import os
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # e.g., https://etagi-bot.onrender.com/webhook
FORWARD_TO_CHAT_ID = "1183134999"

ASK_FIO, ASK_REQUEST_ID, ASK_CONTRACT, ASK_CLIENT, ASK_OBJECT, ASK_TIME, ASK_ACTIONS, ASK_FILES = range(8)
user_data_dict = {}

app = Flask(__name__)
application = ApplicationBuilder().token(BOT_TOKEN).build()

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=reply_markup)

async def start_survey_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.edit_text("\U0001F4E5 –ù–æ–≤—ã–π –∫–µ–π—Å –æ–±—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞:\n\n–í–∞—à–∏ –§–ò–û –∏ –§–ò–û –†–ì–ü?")
    return ASK_FIO

async def ask_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_user.id] = {"–§–ò–û –∏ –§–ò–û –†–ì–ü": update.message.text}
    await update.message.reply_text("–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–æ—à–µ–ª –æ–±—Ö–æ–¥?")
    return ASK_REQUEST_ID

async def ask_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_user.id]["–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"] = update.message.text
    await update.message.reply_text("–ù–æ–º–µ—Ä –∏ –¥–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞?")
    return ASK_CONTRACT

async def ask_contract(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_user.id]["–î–æ–≥–æ–≤–æ—Ä"] = update.message.text
    await update.message.reply_text("–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∏–ª –æ–±—Ö–æ–¥?")
    return ASK_CLIENT

async def ask_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_user.id]["–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞"] = update.message.text
    await update.message.reply_text("–ü–æ –∫–∞–∫–æ–º—É –æ–±—ä–µ–∫—Ç—É –æ–±—Ö–æ–¥?")
    return ASK_OBJECT

async def ask_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_user.id]["–û–±—ä–µ–∫—Ç"] = update.message.text
    await update.message.reply_text("–ö–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?")
    return ASK_TIME

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_user.id]["–í—Ä–µ–º—è"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã?")
    return ASK_ACTIONS

async def ask_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_user.id]["–î–µ–π—Å—Ç–≤–∏—è"] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
    return ASK_FILES

async def ask_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    data = user_data_dict.get(user.id, {})
    summary = (
        f"\U0001F4E5 –ù–æ–≤—ã–π –∫–µ–π—Å –æ–±—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
        f"–§–ò–û –∏ –§–ò–û –†–ì–ü: {data.get('–§–ò–û –∏ –§–ò–û –†–ì–ü')}\n"
        f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {data.get('–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏')}\n"
        f"–î–æ–≥–æ–≤–æ—Ä: {data.get('–î–æ–≥–æ–≤–æ—Ä')}\n"
        f"–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞: {data.get('–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞')}\n"
        f"–û–±—ä–µ–∫—Ç: {data.get('–û–±—ä–µ–∫—Ç')}\n"
        f"–í—Ä–µ–º—è: {data.get('–í—Ä–µ–º—è')}\n"
        f"–î–µ–π—Å—Ç–≤–∏—è: {data.get('–î–µ–π—Å—Ç–≤–∏—è')}"
    )
    await update.message.reply_text("\u2705 –°–ø–∞—Å–∏–±–æ! –ú—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é.", reply_markup=ReplyKeyboardRemove())
    try:
        await context.bot.send_message(chat_id=FORWARD_TO_CHAT_ID, text=summary)
        if update.message.document or update.message.photo:
            await update.message.forward(chat_id=FORWARD_TO_CHAT_ID)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ:", e)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- Conversation logic ---
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_survey_callback, pattern="^start_survey$")],
    states={
        ASK_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_fio)],
        ASK_REQUEST_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_request)],
        ASK_CONTRACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_contract)],
        ASK_CLIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_client)],
        ASK_OBJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_object)],
        ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
        ASK_ACTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_actions)],
        ASK_FILES: [MessageHandler(filters.ALL, ask_files)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

application.add_handler(CommandHandler("start", start))
application.add_handler(conv_handler)

@app.route("/")
def index():
    return "ok"

@app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok"

if __name__ == "__main__":
    import asyncio
    import logging
    logging.basicConfig(level=logging.INFO)

    async def main():
        await application.bot.delete_webhook()
        await application.bot.set_webhook(url=WEBHOOK_URL)
        print("Bot and webhook started successfully.")
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

    asyncio.run(main())
